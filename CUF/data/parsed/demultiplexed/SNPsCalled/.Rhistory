geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV045"][1],
lty=2) +
theme_bw() + labs(y = "Cd (ppm)", x = "Block") + ggtitle("Checks Versus Blocks")
#Histogram unadjusted
par(mfrow=c(2,1))
hist(spinach.data$cadm,
breaks = seq(0,20,0.5), xlab = "Unadjusted", main = "Cd (ppm)")
hist(spinach.data$adjusted.val,
breaks = seq(0,20,0.5), xlab = "Adjusted", main = "Cd (ppm)")
#Countries
ggplot(data = spinach.data, aes(x = country, y = adjusted.val)) +
geom_boxplot(col="black") +
geom_point(aes(col=country), cex=1.9) +
labs(x = "Country", y = "Adjusted Value") +
scale_color_viridis(discrete = T, option = "B") +
theme_bw() + theme(legend.position = "none",
axis.text.x = element_text(angle = 90, hjust = 1))
# model.2 <- lmer(cadm ~ did + (1|blk), data = control.data)
# plot(model.2)
# VarCorr(model.2)
# plot(ranef(model.2)$blk[,1]~ranef(model.1)$blk[,1])
rm(list = ls())
spinach.data <- read.table("~/Desktop/spinach.txt",
header = TRUE,
stringsAsFactors = FALSE
)
nrow(spinach.data)
spinach.data <- subset(spinach.data, !is.na(spinach.data$cadm))
nrow(spinach.data)
str(spinach.data)
spinach.data$rep       <- as.factor(spinach.data$rep)
spinach.data$blk       <- as.factor(spinach.data$blk)
spinach.data$bench     <- as.factor(spinach.data$bench)
spinach.data$did       <- as.factor(spinach.data$did)
spinach.data$country   <- as.factor(spinach.data$country)
spinach.data$status    <- as.factor(spinach.data$status)
spinach.data$control   <- as.factor(ifelse(spinach.data$did %in% c("DAV045","DAV011"),
as.character(spinach.data$did),
NA))
str(spinach.data)
model.1 <- lmer(cadm ~ did + (1|blk),
data = spinach.data)
fixef(model.1)
model.1 <- lmer(cadm ~ 0 + did + (1|blk),
data = spinach.data)
fixef(model.1)
model.1 <- lmer(cadm ~ did + (1|blk),
data = spinach.data)
hist(fixef(model.1))
scale(hist(fixef(model.1)))
hist(scale(fixef(model.1)))
model.1 <- lmer(cadm ~ 0 + did + (1|blk),
data = spinach.data)
fixef(model.1)
plot(residuals(model.1) ~ fitted(model.1),
ylab = "Residuals", xlab = "Fitted Values", pch = 21, bg = spinach.data$control)
plot(residuals(model.1) ~ fitted(model.1),
ylab = "Residuals", xlab = "Fitted Values", pch = 21, bg = spinach.data$control)
VarCorr(model.1)
head(spinach.data)
fixef(model.1)
paste("did",spinach.data$did, sep = ""
)
spinach.data$adjusted.val <- fixef(model.1)[paste("did",spinach.data$did, sep = "")]
head(spinach.data)
head(spinach.data, n=50)
plot(residuals(model.1) ~ fitted(model.1),
ylab = "Residuals", xlab = "Fitted Values", pch = 21, bg = spinach.data$control)
plot(residuals(model.1) ~ fitted(model.1),
ylab = "Residuals", xlab = "Fitted Values", pch = 21, bg = spinach.data$control)
plot(adjusted.val ~ cadm, data = spinach.data, pch = 21, bg = spinach.data$control)
plot(adjusted.val ~ cadm, data = spinach.data, pch = 21, bg = spinach.data$control,
xlab = "Observed", ylab ="Adjusted")
block.se <- se.ranef(model.1)$blk[,1]
entry.se <- se.fixef(model.1)
library(lme4) #has the function lmer to fit linear mixed models
library(lattice) #has the function dotplot for...dotplots
library(ggplot2) #other plotting
library(viridis) #has nice color palettes
library(arm) #has functions to pull se
block.se <- se.ranef(model.1)$blk[,1]
entry.se <- se.fixef(model.1)
block.se
entry.se
block.se
entry.se
1.3/sqrt(20)
dotplot(ranef(model.1, condVar = TRUE))
head(spinach.data)
control.data <- subset(spinach.data, !is.na(control))
gg.baselayer <- ggplot(data = control.data, aes(y = cadm))
gg.baselayer + geom_jitter(aes(x = control, col = control), width = 0.1) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV011"][1],
lty=2) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV045"][1],
lty=2) +
scale_color_discrete(name="Checks") + theme_bw() +
labs(y = "Cd (ppm)", x = "Block") + ggtitle("Checks Versus Blocks")
head(spinach.data)
gg.baselayer + geom_point(aes(x = blk, col = control)) +
scale_color_discrete(name="Checks") +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV011"][1],
lty=2) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV045"][1],
lty=2) +
theme_bw() + labs(y = "Cd (ppm)", x = "Block") + ggtitle("Checks Versus Blocks")
gg.baselayer + geom_jitter(aes(x = bench, col = control),width = 0.1) +
scale_color_discrete(name="Checks") +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV011"][1],
lty=2) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV045"][1],
lty=2) +
theme_bw() + labs(y = "Cd (ppm)", x = "Block") + ggtitle("Checks Versus Blocks")
par(mfrow=c(2,1))
hist(spinach.data$cadm,
breaks = seq(0,20,0.5), xlab = "Unadjusted", main = "Cd (ppm)")
hist(spinach.data$adjusted.val,
breaks = seq(0,20,0.5), xlab = "Adjusted", main = "Cd (ppm)")
head(spinach.data)
ggplot(data = spinach.data, aes(x = country, y = adjusted.val)) +
geom_boxplot(col="black") +
geom_point(aes(col=country), cex=1.9) +
labs(x = "Country", y = "Adjusted Value") +
scale_color_viridis(discrete = T, option = "B") +
theme_bw() + theme(legend.position = "none",
axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = spinach.data, aes(x = status, y = adjusted.val)) +
geom_boxplot(col="black") +
geom_point(aes(col=country), cex=1.9) +
labs(x = "Country", y = "Adjusted Value") +
scale_color_viridis(discrete = T, option = "B") +
theme_bw() + theme(legend.position = "none",
axis.text.x = element_text(angle = 90, hjust = 1))
adjusted.values <- spinach.data$adjusted.val
adjusted.values
names(adjusted.values) <- as.character(spinach.data$did)
adjusted.values
adjusted.values        <- spinach.data$adjusted.val
names(adjusted.values) <- as.character(spinach.data$did)
adjusted.values        <- adjusted.values[order(adjusted.values)]
head(adjusted.values)
adjusted.values             <- adjusted.values[order(adjusted.values, rev = TRUE)]
?order
adjusted.values       <- adjusted.values[order(adjusted.values, decreasing = TRUE)]
head(adjusted.values)
write.table(rank.adjusted.values, "./rank.adjusted.values.txt", quote = F, sep = "\t")
rank.adjusted.values  <- adjusted.values[order(adjusted.values, decreasing = TRUE)]
write.table(rank.adjusted.values, "./rank.adjusted.values.txt", quote = F, sep = "\t")
write.table(rank.adjusted.values, "./rank.adjusted.values.txt",
quote = F, sep = "\t", col.names = F, row.names = T)
write.table(rank.adjusted.values, "./rank.adjusted.values.txt",
quote = F, sep = "\t", col.names = T, row.names = T)
write.table(cbind(as.character(names(rank.adjusted.values)),
rank.adjusted.values), "./rank.adjusted.values.txt",
quote = F, sep = "\t", col.names = T, row.names = T)
write.table(rank.adjusted.values, "./rank.adjusted.values.txt",
quote = F, sep = "\t", col.names = T, row.names = T)
write.table(rank.adjusted.values, "./rank.adjusted.values.txt",
quote = F, sep = "\t", col.names = T, row.names = T)
write.table(cbind(as.character(names(rank.adjusted.values)),
rank.adjusted.values), "./rank.adjusted.values.txt",
quote = F, sep = "\t", col.names = T, row.names = F)
clean.adjusted.values <- rank.adjusted.values[!duplicated(names(rank.adjusted.values))]
length(clean.adjusted.values)
length(rank.adjusted.values)
par(mfrow=c(2,1))
hist(spinach.data$cadm,
breaks = seq(0,20,0.5), xlab = "Unadjusted", main = "Cd (ppm)")
par(mfrow=c(1,1))
hist(spinach.data$cadm,
breaks = seq(0,20,0.5), xlab = "Unadjusted", main = "Cd (ppm)")
hist(spinach.data$cadm,
breaks = seq(0,20,0.05), xlab = "Unadjusted", main = "Cd (ppm)")
hist(spinach.data$cadm,
breaks = seq(0,20,0.5), xlab = "Unadjusted", main = "Cd (ppm)")
hist(spinach.data$cadm,
breaks = seq(0,20,5), xlab = "Unadjusted", main = "Cd (ppm)")
hist(spinach.data$cadm,
breaks = seq(0,20,0.5), xlab = "Unadjusted", main = "Cd (ppm)")
hist(spinach.data$cadm)
gg.baselayer + geom_jitter(aes(x = bench, col = control),width = 0.1) +
scale_color_discrete(name="Checks") +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV011"][1],
lty=2) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV045"][1],
lty=2) +
theme_bw() + labs(y = "Cd (ppm)", x = "Block") + ggtitle("Checks Versus Blocks")
model.1 <- lmer(cadm ~ 0 + did + (1|blk),
data = spinach.data)
plot(residuals(model.1) ~ fitted(model.1),
ylab = "Residuals", xlab = "Fitted Values", pch = 21, bg = spinach.data$control)
model.1 <- lmer(cadm ~ 0 + did + (1|blk) + (1|bench),
data = spinach.data)
plot(residuals(model.1) ~ fitted(model.1),
ylab = "Residuals", xlab = "Fitted Values", pch = 21, bg = spinach.data$control)
ranef(model.1)
model.1 <- lmer(cadm ~ 0 + did + (1|blk) +(1|South),
data = spinach.data)
plot(residuals(model.1) ~ fitted(model.1),
ylab = "Residuals", xlab = "Fitted Values", pch = 21, bg = spinach.data$control)
gg.baselayer + geom_jitter(aes(x = control, col = control), width = 0.1) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV011"][1],
lty=2) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV045"][1],
lty=2) +
scale_color_discrete(name="Checks") + theme_bw() +
labs(y = "Cd (ppm)", x = "Block") + ggtitle("Checks Versus Blocks")
gg.baselayer + geom_jitter(aes(x = North, col = control), width = 0.1) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV011"][1],
lty=2) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV045"][1],
lty=2) +
scale_color_discrete(name="Checks") + theme_bw() +
labs(y = "Cd (ppm)", x = "Block") + ggtitle("Checks Versus Blocks")
gg.baselayer + geom_jitter(aes(x = South, col = control), width = 0.1) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV011"][1],
lty=2) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV045"][1],
lty=2) +
scale_color_discrete(name="Checks") + theme_bw() +
labs(y = "Cd (ppm)", x = "Block") + ggtitle("Checks Versus Blocks")
spinach.data
gg.baselayer + geom_jitter(aes(x = East, col = control), width = 0.1) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV011"][1],
lty=2) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV045"][1],
lty=2) +
scale_color_discrete(name="Checks") + theme_bw() +
labs(y = "Cd (ppm)", x = "Block") + ggtitle("Checks Versus Blocks")
gg.baselayer + geom_jitter(aes(x = West, col = control), width = 0.1) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV011"][1],
lty=2) +
geom_hline(yintercept = control.data$adjusted.val[control.data$did=="DAV045"][1],
lty=2) +
scale_color_discrete(name="Checks") + theme_bw() +
labs(y = "Cd (ppm)", x = "Block") + ggtitle("Checks Versus Blocks")
shiny::runApp('Downloads/reformatstuff')
runApp('Downloads/reformatstuff')
runApp('Downloads/reformatstuff')
runApp('Downloads/reformatstuff')
?grid.arrange
runApp('Downloads/reformatstuff')
p1=0.3
p2=0.6
hs = 2*p1*(1-p1) +  2*p2*(1-p2)
pt=(p1+p2)/2
ht = 2*pt*(1-pt)
fst = (ht - hs)/ht
fst
fst = (ht - (hs/2))/ht
fst
p1=0.1
p2=0.6
pt=(p1+p2)/2
hs = 2*p1*(1-p1) +  2*p2*(1-p2)
ht = 2*pt*(1-pt)
fst = (ht - (hs/2))/ht
fst
(p1/2 + p2/2 + 1 - p1 - p2 - p1 + p1^2 - p2 + p2^2)/(p1/2 + p2/2 + 1 - p1 - p2)
(p1 - p2)^2/((p1+p2)*(2-p1-p2))
p1=0.3
p2=0.6
pt=(p1+p2)/2
hs = 2*p1*(1-p1) +  2*p2*(1-p2)
ht = 2*pt*(1-pt)
fst = (ht - (hs/2))/ht
fst
(p1 - p2)^2/((p1+p2)*(2-p1-p2))
results <- c()
for(i in 1:10000){
#Generate random frequencies for two pops at locus p
p1 <- sample(seq(0,1,0.01), 1)
p2 <- sample(seq(0,1,0.01), 1)
#Overall frequency (is ploidy independent)
po <- (p1+p2)/2
#---Diploid Fst, equal pop sizes
Ht <- 2*po*(1-po)
Hs <- ((2*p1*(1-p1)) + (2*p2*(1-p2))) / 2
Fst.dip <- (Ht - Hs)/Ht
#---Autotetraploid Fst, No selfing, no double reduction, equal pop sizes
#Frequency of homozygous in overall
o.ho1 <- po^4
o.ho2 <- (1-po)^4
#Frequency of homozygous in pop 1
p1.ho1 <- p1^4
p1.ho2 <- (1-p1)^4
#Frequency of homozygous in pop 2
p2.ho1 <- p2^4
p2.ho2 <- (1-p2)^4
ht <- 1 - o.ho1 - o.ho2
hs <- ((1 - p1.ho1 - p1.ho2) + (1 - p2.ho1 - p2.ho2)) / 2
Fst.tet <- (ht-hs)/ht
result <- rbind(cbind(Fst = Fst.dip, Population ="Diploid"),
cbind(Fst.tet, "Tetraploid"))
results <- rbind(results, result)
}
results <- data.frame(results)
results$Fst <- as.numeric(as.character(results$Fst))
library(car)
library(viridis)
par(mfrow=c(1,2))
densityPlot(Fst~Population,
data = results, col=viridis(5, option = "C")[c(4,1)])
plot(Fst[results$Population=="Diploid"]~Fst[results$Population=="Tetraploid"],
data = results, ylab = "Diploid", xlab = "Tetraploid",
pch=21, bg=viridis(1, alpha = 0.1),col=viridis(1, alpha = 0.05))
abline(0, 1, lty=3)
results <- c()
for(i in 1:10000){
#Generate random frequencies for two pops at locus p
p1 <- sample(seq(0,1,0.01), 1)
p2 <- sample(seq(0,1,0.01), 1)
#Overall frequency (is ploidy independent)
po <- (p1+p2)/2
#---Diploid Fst, equal pop sizes
Ht <- 2*po*(1-po)
Hs <- ((2*p1*(1-p1)) + (2*p2*(1-p2))) / 2
Fst.dip <- (Ht - Hs)/Ht
#---Diploid Fst
#Frequency of homozygous in overall
o.ho1 <- po^2
o.ho2 <- (1-po)^2
#Frequency of homozygous in pop 1
p1.ho1 <- p1^2
p1.ho2 <- (1-p1)^2
#Frequency of homozygous in pop 2
p2.ho1 <- p2^2
p2.ho2 <- (1-p2)^2
ht <- 1 - o.ho1 - o.ho2
hs <- ((1 - p1.ho1 - p1.ho2) + (1 - p2.ho1 - p2.ho2)) / 2
Fst.dip2 <- (ht-hs)/ht
#---Autotetraploid Fst, No selfing, no double reduction, equal pop sizes
#Frequency of homozygous in overall
o.ho1 <- po^4
o.ho2 <- (1-po)^4
#Frequency of homozygous in pop 1
p1.ho1 <- p1^4
p1.ho2 <- (1-p1)^4
#Frequency of homozygous in pop 2
p2.ho1 <- p2^4
p2.ho2 <- (1-p2)^4
ht <- 1 - o.ho1 - o.ho2
hs <- ((1 - p1.ho1 - p1.ho2) + (1 - p2.ho1 - p2.ho2)) / 2
Fst.tet <- (ht-hs)/ht
result <- rbind(cbind(Fst = Fst.dip2, Population ="Diploid"),
cbind(Fst.tet, "Tetraploid"))
results <- rbind(results, result)
}
results <- data.frame(results)
results$Fst <- as.numeric(as.character(results$Fst))
library(car)
library(viridis)
par(mfrow=c(1,2))
densityPlot(Fst~Population,
data = results, col=viridis(5, option = "C")[c(4,1)])
plot(Fst[results$Population=="Diploid"]~Fst[results$Population=="Tetraploid"],
data = results, ylab = "Diploid", xlab = "Tetraploid",
pch=21, bg=viridis(1, alpha = 0.1),col=viridis(1, alpha = 0.05))
abline(0, 1, lty=3)
results <- c()
for(i in 1:10000){
#Generate random frequencies for two pops at locus p
p1 <- sample(seq(0,1,0.01), 1)
p2 <- sample(seq(0,1,0.01), 1)
#Overall frequency (is ploidy independent)
po <- (p1+p2)/2
#---Diploid Fst, equal pop sizes
Ht <- 2*po*(1-po)
Hs <- ((2*p1*(1-p1)) + (2*p2*(1-p2))) / 2
Fst.dip <- (Ht - Hs)/Ht
#---Diploid Fst
#Frequency of homozygous in overall
o.ho1 <- po^2
o.ho2 <- (1-po)^2
#Frequency of homozygous in pop 1
p1.ho1 <- p1^2
p1.ho2 <- (1-p1)^2
#Frequency of homozygous in pop 2
p2.ho1 <- p2^2
p2.ho2 <- (1-p2)^2
ht <- 1 - o.ho1 - o.ho2
hs <- ((1 - p1.ho1 - p1.ho2) + (1 - p2.ho1 - p2.ho2)) / 2
Fst.dip2 <- (ht-hs)/ht
#---Autotetraploid Fst, No selfing, no double reduction, equal pop sizes
#Frequency of homozygous in overall
o.ho1 <- po^4
o.ho2 <- (1-po)^4
#Frequency of homozygous in pop 1
p1.ho1 <- p1^4
p1.ho2 <- (1-p1)^4
#Frequency of homozygous in pop 2
p2.ho1 <- p2^4
p2.ho2 <- (1-p2)^4
ht <- 1 - o.ho1 - o.ho2
hs <- ((1 - p1.ho1 - p1.ho2) + (1 - p2.ho1 - p2.ho2)) / 2
Fst.tet <- (ht-hs)/ht
result <- rbind(cbind(Fst = Fst.dip2, Population ="Diploid"),
cbind(Fst.dip, "Tetraploid"))
results <- rbind(results, result)
}
results <- data.frame(results)
results$Fst <- as.numeric(as.character(results$Fst))
library(car)
library(viridis)
par(mfrow=c(1,2))
densityPlot(Fst~Population,
data = results, col=viridis(5, option = "C")[c(4,1)])
plot(Fst[results$Population=="Diploid"]~Fst[results$Population=="Tetraploid"],
data = results, ylab = "Diploid", xlab = "Tetraploid",
pch=21, bg=viridis(1, alpha = 0.1),col=viridis(1, alpha = 0.05))
abline(0, 1, lty=3)
results <- c()
for(i in 1:10000){
#Generate random frequencies for two pops at locus p
p1 <- sample(seq(0,1,0.01), 1)
p2 <- sample(seq(0,1,0.01), 1)
#Overall frequency (is ploidy independent)
po <- (p1+p2)/2
#---Diploid Fst, equal pop sizes
Ht <- 2*po*(1-po)
Hs <- ((2*p1*(1-p1)) + (2*p2*(1-p2))) / 2
Fst.dip <- (Ht - Hs)/Ht
#---Diploid Fst
#Frequency of homozygous in overall
o.ho1 <- po^2
o.ho2 <- (1-po)^2
#Frequency of homozygous in pop 1
p1.ho1 <- p1^2
p1.ho2 <- (1-p1)^2
#Frequency of homozygous in pop 2
p2.ho1 <- p2^2
p2.ho2 <- (1-p2)^2
ht <- 1 - o.ho1 - o.ho2
hs <- ((1 - p1.ho1 - p1.ho2) + (1 - p2.ho1 - p2.ho2)) / 2
Fst.dip2 <- (ht-hs)/ht
#---Autotetraploid Fst, No selfing, no double reduction, equal pop sizes
#Frequency of homozygous in overall
o.ho1 <- po^4
o.ho2 <- (1-po)^4
#Frequency of homozygous in pop 1
p1.ho1 <- p1^4
p1.ho2 <- (1-p1)^4
#Frequency of homozygous in pop 2
p2.ho1 <- p2^4
p2.ho2 <- (1-p2)^4
ht <- 1 - o.ho1 - o.ho2
hs <- ((1 - p1.ho1 - p1.ho2) + (1 - p2.ho1 - p2.ho2)) / 2
Fst.tet <- (ht-hs)/ht
result <- rbind(cbind(Fst = Fst.dip2, Population ="Diploid"),
cbind(Fst.tet, "Tetraploid"))
results <- rbind(results, result)
}
results <- data.frame(results)
results$Fst <- as.numeric(as.character(results$Fst))
library(car)
library(viridis)
par(mfrow=c(1,2))
densityPlot(Fst~Population,
data = results, col=viridis(5, option = "C")[c(4,1)])
plot(Fst[results$Population=="Diploid"]~Fst[results$Population=="Tetraploid"],
data = results, ylab = "Diploid", xlab = "Tetraploid",
pch=21, bg=viridis(1, alpha = 0.1),col=viridis(1, alpha = 0.05))
abline(0, 1, lty=3)
dev.off()
rm(list=ls())
setwd("~/Desktop/BrummerLab/projects/divergent-pops/singlepop/singlepop-scripts/")
populationtitle <- "CUF"
setwd(paste("../",
populationtitle,
"/data/", sep = ""))
can.pcadapt <- read.table(paste("../results/4-candidates-",
populationtitle, ".txt", sep = ""), header = T, sep = "\t")
candidate.clusters <- c(as.character(can.pcadapt$cluster))
length(candidate.clusters)
candidate.clusters <- paste(">", candidate.clusters, sep = "")
write.table(candidate.clusters,
"alfalfa.candidate.clusters.txt",
quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)
write.table(candidate.clusters,
"~/Desktop/alfalfa.candidate.clusters.txt",
quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)
setwd("~/Desktop/")
rm(list=ls())
setwd("~/Desktop/BrummerLab/projects/divergent-pops/singlepop/singlepop-scripts/")
setwd(paste("../",
populationtitle,
"/data/", sep = ""))
populationtitle <- "CUF"
can.pcadapt <- read.table(paste("../results/4-candidates-",
populationtitle, ".txt", sep = ""), header = T, sep = "\t")
setwd(paste("../",
populationtitle,
"/data/", sep = ""))
can.pcadapt <- read.table(paste("../results/4-candidates-",
populationtitle, ".txt", sep = ""), header = T, sep = "\t")
candidate.clusters <- c(as.character(can.pcadapt$cluster))
length(candidate.clusters)
candidate.clusters <- paste(">", candidate.clusters, sep = "")
system("rm alfalfa.candidate*")
write.table(candidate.clusters,
"posmaskcheck.candidate.clusters.txt",
quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)
system("grep -x -A 1 -f posmaskcheck.candidate.clusters.txt CUF0-95-1lanevsearch-Reference.MockRef_Clusters.fasta > candidate.clusters.tmp")
system("grep -x -A 1 -f posmaskcheck.candidate.clusters.txt CUF0-95-allvsearch-Reference.MockRef_Clusters.fasta > candidate.clusters.tmp")
setwd("./parsed/demultiplexed/SNPsCalled/")
system("grep -x -A 1 -f posmaskcheck.candidate.clusters.txt CUF0-95-allvsearch-Reference.MockRef_Clusters.fasta > candidate.clusters.tmp")
write.table(candidate.clusters,
"posmaskcheck.candidate.clusters.txt",
quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)
system("grep -x -A 1 -f posmaskcheck.candidate.clusters.txt CUF0-95-allvsearch-Reference.MockRef_Clusters.fasta > candidate.clusters.tmp")
system("grep -x -A 1 -f posmaskcheck.candidate.clusters.txt CUF0-95-1lanevsearch-Reference.MockRef_Clusters.fasta > candidate.clusters.tmp")
system("grep -x -A 1 -f posmaskcheck.candidate.clusters.txt CUF-95-allvsearch-Reference.MockRef_Clusters.fasta > candidate.clusters.tmp")

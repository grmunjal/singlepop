#Sample from posterior
samp.model = coda.samples(adapt.model,
c("genotype"), n.iter=1000)
#Calculate posterior genotypes
posterior.genotypes <- c()
for(i in 1:ncol(samp.model[[1]])){
posterior.plausibility <- (samp.model[[1]][,i]/sum(samp.model[[1]][,i]))
posterior.value <- (samp.model[[1]][,i])
posterior.genotype <- sum(posterior.plausibility*posterior.value)
posterior.genotypes <- c(posterior.genotypes, posterior.genotype)
}
#Plot posterior
if(plotc == TRUE){
par(mfrow=c(1,1))
ml.genotypes <- geno.data$count.a1/geno.data$count.tot
plot(posterior.genotypes ~ ml.genotypes)
par(mfrow=c(4,1))
for(i in 1:4){
r.index <- sample(1:geno.data$n, 1)
plot(density(samp.model[,r.index][[1]]),
main=paste("coverage = ", geno.data$count.tot[r.index],
" maf = ", round(geno.data$maf.mark,2)),
xlab=paste("major allele count =", geno.data$count.a1[r.index]),
xlim=c(-1,5))
}
}
return(posterior.genotypes)
}
sim.dat <- data.frame(
bg=factor(rep(c("C", "L", "M", "N", "S", "W"), each=3)),
fd=rep(c(5,3,4,1,2,6), each=3),
cycle=rep(c(0,3,-3),6))
sim.dat$freqs <- 10/10
sim.dat$ms <- ifelse(sim.dat$freqs > 0.5, 1 - sim.dat$freqs, sim.dat$freqs)
sim.dat$freqs[seq(2,18,3)] <-
sim.dat$freqs[seq(2,18,3)] +
(sim.dat$ms[seq(2,18,3)])/4
sim.dat$freqs[seq(3,18,3)] <-
sim.dat$freqs[seq(3,18,3)] -
(sim.dat$ms[seq(3,18,3)])/2
sim.dat$freqs <- ifelse(sim.dat$freqs>1,1,sim.dat$freqs)
sim.dat$freqs <- ifelse(sim.dat$freqs<0,0,sim.dat$freqs)
par(mfrow=c(1,2))
plot(sim.dat$fd , sim.dat$freqs, ylab ="Allele Frequency", xlab ="FD class")
plot(sim.dat$cycle , sim.dat$freqs, ylab = "Allele Frequency", xlab ="FD class")
summary(lm(freqs ~ cycle, data = sim.dat))
a1c=matrix(NA,6,18)
totc=matrix(NA,6,18)
x <- c(2,5,10,20,50,300)
for(i in 1:length(x)){
a1c[i,] = rbinom(18, x[i], sim.dat$freqs)
totc[i,] = rep(x[i],18)
}
a1c=matrix(NA,6,18)
totc=matrix(NA,6,18)
x <- c(0,2,10,20,50,300)
for(i in 1:length(x)){
a1c[i,] = rbinom(18, x[i], sim.dat$freqs)
totc[i,] = rep(x[i],18)
}
calc.geno.posterior(a1c = a1c[,i], totc = totc[,i], mafc = 1, ploidy = 4, plotc = T)
totc[,1]
i
calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 1, ploidy = 4, plotc = T)
r.index <- c(1:geno.data$n)[i]
calc.geno.posterior <- function(a1c, totc, mafc, ploidy, plotc=F){
geno.data <- list(n = length(a1c),
count.a1 = as.numeric(a1c),
count.tot = as.numeric(totc),
maf.mark = mafc,
ploidy = ploidy)
geno.model <-
"model {
# Likelihood
for (i in 1:n) {
count.a1[i] ~ dbinom(genofrac[i], count.tot[i])
genofrac[i] <- genotype[i]/4
genotype[i] ~ dbinom(maf.mark, ploidy)
}
}"
#Initialize model
adapt.model <- jags.model(textConnection(geno.model),
data=geno.data,
n.chains=1,
n.adapt=2000)
#Sample from posterior
samp.model = coda.samples(adapt.model,
c("genotype"), n.iter=1000)
#Calculate posterior genotypes
posterior.genotypes <- c()
for(i in 1:ncol(samp.model[[1]])){
posterior.plausibility <- (samp.model[[1]][,i]/sum(samp.model[[1]][,i]))
posterior.value <- (samp.model[[1]][,i])
posterior.genotype <- sum(posterior.plausibility*posterior.value)
posterior.genotypes <- c(posterior.genotypes, posterior.genotype)
}
#Plot posterior
if(plotc == TRUE){
par(mfrow=c(1,1))
ml.genotypes <- geno.data$count.a1/geno.data$count.tot
plot(posterior.genotypes ~ ml.genotypes)
par(mfrow=c(4,1))
for(i in 1:4){
r.index <- c(1:geno.data$n)[i]
plot(density(samp.model[,r.index][[1]]),
main=paste("coverage = ", geno.data$count.tot[r.index],
" maf = ", round(geno.data$maf.mark,2)),
xlab=paste("major allele count =", geno.data$count.a1[r.index]),
xlim=c(-1,5))
}
}
return(posterior.genotypes)
}
sim.dat <- data.frame(
bg=factor(rep(c("C", "L", "M", "N", "S", "W"), each=3)),
fd=rep(c(5,3,4,1,2,6), each=3),
cycle=rep(c(0,3,-3),6))
sim.dat$freqs <- 10/10
sim.dat$ms <- ifelse(sim.dat$freqs > 0.5, 1 - sim.dat$freqs, sim.dat$freqs)
sim.dat$freqs[seq(2,18,3)] <-
sim.dat$freqs[seq(2,18,3)] +
(sim.dat$ms[seq(2,18,3)])/4
sim.dat$freqs[seq(3,18,3)] <-
sim.dat$freqs[seq(3,18,3)] -
(sim.dat$ms[seq(3,18,3)])/2
sim.dat$freqs <- ifelse(sim.dat$freqs>1,1,sim.dat$freqs)
sim.dat$freqs <- ifelse(sim.dat$freqs<0,0,sim.dat$freqs)
par(mfrow=c(1,2))
plot(sim.dat$fd , sim.dat$freqs, ylab ="Allele Frequency", xlab ="FD class")
plot(sim.dat$cycle , sim.dat$freqs, ylab = "Allele Frequency", xlab ="FD class")
summary(lm(freqs ~ cycle, data = sim.dat))
a1c=matrix(NA,6,18)
totc=matrix(NA,6,18)
x <- c(0,2,10,20,50,300)
for(i in 1:length(x)){
a1c[i,] = rbinom(18, x[i], sim.dat$freqs)
totc[i,] = rep(x[i],18)
}
calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 1, ploidy = 4, plotc = T)
sim.dat <- data.frame(
bg=factor(rep(c("C", "L", "M", "N", "S", "W"), each=3)),
fd=rep(c(5,3,4,1,2,6), each=3),
cycle=rep(c(0,3,-3),6))
sim.dat$freqs <- 5/10
sim.dat$ms <- ifelse(sim.dat$freqs > 0.5, 1 - sim.dat$freqs, sim.dat$freqs)
sim.dat$freqs[seq(2,18,3)] <-
sim.dat$freqs[seq(2,18,3)] +
(sim.dat$ms[seq(2,18,3)])/4
sim.dat$freqs[seq(3,18,3)] <-
sim.dat$freqs[seq(3,18,3)] -
(sim.dat$ms[seq(3,18,3)])/2
sim.dat$freqs <- ifelse(sim.dat$freqs>1,1,sim.dat$freqs)
sim.dat$freqs <- ifelse(sim.dat$freqs<0,0,sim.dat$freqs)
par(mfrow=c(1,2))
plot(sim.dat$fd , sim.dat$freqs, ylab ="Allele Frequency", xlab ="FD class")
plot(sim.dat$cycle , sim.dat$freqs, ylab = "Allele Frequency", xlab ="FD class")
summary(lm(freqs ~ cycle, data = sim.dat))
a1c=matrix(NA,6,18)
totc=matrix(NA,6,18)
x <- c(0,2,10,20,50,300)
for(i in 1:length(x)){
a1c[i,] = rbinom(18, x[i], sim.dat$freqs)
totc[i,] = rep(x[i],18)
}
calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 1, ploidy = 4, plotc = T)
function (object, n.iter = 1, by, progress.bar, ...)
{
if (!is.numeric(n.iter) || n.iter < 1) {
stop("Invalid n.iter")
}
adapting <- .Call("is_adapting", object$ptr(), PACKAGE = "rjags")
on.exit(object$sync())
if (missing(progress.bar)) {
progress.bar <- getOption("jags.pb")
}
if (!is.null(progress.bar)) {
match.arg(progress.bar, c("text", "gui", "none"))
if (progress.bar == "none")
progress.bar <- NULL
}
do.pb <- interactive() && !is.null(progress.bar) && n.iter >=
100
if (do.pb) {
start.iter <- object$iter()
end.iter <- start.iter + n.iter
pb <- switch(progress.bar, text = txtProgressBar(start.iter,
end.iter, initial = start.iter, style = 3, width = 50,
char = ifelse(adapting, "+", "*")), gui = updatePB(start.iter,
end.iter, adapting))
}
if (missing(by) || by <= 0) {
by <- ceiling(n.iter/50)
}
else {
by <- ceiling(by)
}
n <- n.iter
while (n > 0) {
.Call("update", object$ptr(), min(n, by), PACKAGE = "rjags")
if (do.pb) {
switch(progress.bar, text = setTxtProgressBar(pb,
object$iter()), gui = setPB(pb, object$iter()))
}
n <- n - by
}
if (do.pb) {
close(pb)
}
invisible(NULL)
}
calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 1, ploidy = 4, plotc = T)
calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 0.5, ploidy = 4, plotc = T)
a1c[,1] <- totc[,1]
calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 0.5, ploidy = 4, plotc = T)
a <- calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 0.5, ploidy = 4, plotc = T)
a
calc.geno.posterior <- function(a1c, totc, mafc, ploidy, plotc=F){
geno.data <- list(n = length(a1c),
count.a1 = as.numeric(a1c),
count.tot = as.numeric(totc),
maf.mark = mafc,
ploidy = ploidy)
geno.model <-
"model {
# Likelihood
for (i in 1:n) {
count.a1[i] ~ dbinom(genofrac[i], count.tot[i])
genofrac[i] <- genotype[i]/4
genotype[i] ~ dbinom(maf.mark, ploidy)
}
}"
#Initialize model
adapt.model <- jags.model(textConnection(geno.model),
data=geno.data,
n.chains=1,
n.adapt=2000)
#Sample from posterior
samp.model = coda.samples(adapt.model,
c("genotype"), n.iter=1000)
#Calculate posterior genotypes
posterior.genotypes <- c()
for(i in 1:ncol(samp.model[[1]])){
posterior.plausibility <- (samp.model[[1]][,i]/sum(samp.model[[1]][,i]))
posterior.value <- (samp.model[[1]][,i])
posterior.genotype <- sum(posterior.plausibility*posterior.value)
posterior.genotypes <- c(posterior.genotypes, posterior.genotype)
}
#Plot posterior
if(plotc == TRUE){
par(mfrow=c(1,1))
ml.genotypes <- geno.data$count.a1/geno.data$count.tot
plot(posterior.genotypes ~ ml.genotypes)
par(mfrow=c(4,1))
for(i in 1:4){
r.index <- c(1:geno.data$n)[i]
plot((samp.model[,r.index][[1]]),
main=paste("coverage = ", geno.data$count.tot[r.index],
" maf = ", round(geno.data$maf.mark,2)),
xlab=paste("major allele count =", geno.data$count.a1[r.index]),
xlim=c(-1,5))
}
}
return(posterior.genotypes)
}
a <- calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 0.5, ploidy = 4, plotc = T)
?density()
require(graphics)
plot(density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))  # IQR = 0
# The Old Faithful geyser data
d <- density(faithful$eruptions, bw = "sj")
d
plot(d)
plot(d, type = "n")
polygon(d, col = "wheat")
## Missing values:
x <- xx <- faithful$eruptions
x[i.out <- sample(length(x), 10)] <- NA
doR <- density(x, bw = 0.15, na.rm = TRUE)
lines(doR, col = "blue")
points(xx[i.out], rep(0.01, 10))
## Weighted observations:
fe <- sort(faithful$eruptions) # has quite a few non-unique values
## use 'counts / n' as weights:
dw <- density(unique(fe), weights = table(fe)/length(fe), bw = d$bw)
utils::str(dw) ## smaller n: only 126, but identical estimate:
stopifnot(all.equal(d[1:3], dw[1:3]))
## simulation from a density() fit:
# a kernel density fit is an equally-weighted mixture.
fit <- density(xx)
N <- 1e6
x.new <- rnorm(N, sample(xx, size = N, replace = TRUE), fit$bw)
plot(fit)
lines(density(x.new), col = "blue")
(kernels <- eval(formals(density.default)$kernel))
## show the kernels in the R parametrization
plot (density(0, bw = 1), xlab = "",
main = "R's density() kernels with bw = 1")
for(i in 2:length(kernels))
lines(density(0, bw = 1, kernel =  kernels[i]), col = i)
legend(1.5,.4, legend = kernels, col = seq(kernels),
lty = 1, cex = .8, y.intersp = 1)
## show the kernels in the S parametrization
plot(density(0, from = -1.2, to = 1.2, width = 2, kernel = "gaussian"),
type = "l", ylim = c(0, 1), xlab = "",
main = "R's density() kernels with width = 1")
for(i in 2:length(kernels))
lines(density(0, width = 2, kernel =  kernels[i]), col = i)
legend(0.6, 1.0, legend = kernels, col = seq(kernels), lty = 1)
##-------- Semi-advanced theoretic from here on -------------
(RKs <- cbind(sapply(kernels,
function(k) density(kernel = k, give.Rkern = TRUE))))
100*round(RKs["epanechnikov",]/RKs, 4) ## Efficiencies
bw <- bw.SJ(precip) ## sensible automatic choice
plot(density(precip, bw = bw),
main = "same sd bandwidths, 7 different kernels")
for(i in 2:length(kernels))
lines(density(precip, bw = bw, kernel = kernels[i]), col = i)
## Bandwidth Adjustment for "Exactly Equivalent Kernels"
h.f <- sapply(kernels, function(k)density(kernel = k, give.Rkern = TRUE))
(h.f <- (h.f["gaussian"] / h.f)^ .2)
## -> 1, 1.01, .995, 1.007,... close to 1 => adjustment barely visible..
plot(density(precip, bw = bw),
main = "equivalent bandwidths, 7 different kernels")
for(i in 2:length(kernels))
lines(density(precip, bw = bw, adjust = h.f[i], kernel = kernels[i]),
col = i)
legend(55, 0.035, legend = kernels, col = seq(kernels), lty = 1)
[Packa
plot(density(0, from = -1.2, to = 1.2, width = 2, kernel = "gaussian"),
type = "l", ylim = c(0, 1), xlab = "",
main = "R's density() kernels with width = 1")
plot (density(0, bw = 1), xlab = "",
main = "R's density() kernels with bw = 1")
plot (density(0, bw = 1), xlab = "",
main = "R's density() kernels with bw = 1")
for(i in 2:length(kernels))
lines(density(0, bw = 1, kernel =  kernels[i]), col = i)
kernels
plot (density(0, bw = 1), xlab = "",
main = "R's density() kernels with bw = 1")
lines(density(0, bw = 1, kernel =  kernels[1]), col = 1)
lines(density(0, bw = 1, kernel =  kernels[7]), col = 7)
lines(density(0, bw = 1, kernel =  kernels[7]), col = 6)
lines(density(0, bw = 1, kernel =  kernels[6]), col = 6)
lines(density(0, bw = 1, kernel =  kernels[5]), col = 6)
lines(density(0, bw = 1, kernel =  kernels[4]), col = 6)
lines(density(0, bw = 1, kernel =  kernels[3]), col = 6)
lines(density(0, bw = 1, kernel =  kernels[2]), col = 6)
kernels
calc.geno.posterior <- function(a1c, totc, mafc, ploidy, plotc=F){
geno.data <- list(n = length(a1c),
count.a1 = as.numeric(a1c),
count.tot = as.numeric(totc),
maf.mark = mafc,
ploidy = ploidy)
geno.model <-
"model {
# Likelihood
for (i in 1:n) {
count.a1[i] ~ dbinom(genofrac[i], count.tot[i])
genofrac[i] <- genotype[i]/4
genotype[i] ~ dbinom(maf.mark, ploidy)
}
}"
#Initialize model
adapt.model <- jags.model(textConnection(geno.model),
data=geno.data,
n.chains=1,
n.adapt=2000)
#Sample from posterior
samp.model = coda.samples(adapt.model,
c("genotype"), n.iter=1000)
#Calculate posterior genotypes
posterior.genotypes <- c()
for(i in 1:ncol(samp.model[[1]])){
posterior.plausibility <- (samp.model[[1]][,i]/sum(samp.model[[1]][,i]))
posterior.value <- (samp.model[[1]][,i])
posterior.genotype <- sum(posterior.plausibility*posterior.value)
posterior.genotypes <- c(posterior.genotypes, posterior.genotype)
}
#Plot posterior
if(plotc == TRUE){
par(mfrow=c(1,1))
ml.genotypes <- geno.data$count.a1/geno.data$count.tot
plot(posterior.genotypes ~ ml.genotypes)
par(mfrow=c(4,1))
for(i in 1:4){
r.index <- c(1:geno.data$n)[i]
plot(density(samp.model[,r.index][[1]], kernel = 3),
main=paste("coverage = ", geno.data$count.tot[r.index],
" maf = ", round(geno.data$maf.mark,2)),
xlab=paste("major allele count =", geno.data$count.a1[r.index]),
xlim=c(-1,5))
}
}
return(posterior.genotypes)
}
a <- calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 0.5, ploidy = 4, plotc = T)
calc.geno.posterior <- function(a1c, totc, mafc, ploidy, plotc=F){
geno.data <- list(n = length(a1c),
count.a1 = as.numeric(a1c),
count.tot = as.numeric(totc),
maf.mark = mafc,
ploidy = ploidy)
geno.model <-
"model {
# Likelihood
for (i in 1:n) {
count.a1[i] ~ dbinom(genofrac[i], count.tot[i])
genofrac[i] <- genotype[i]/4
genotype[i] ~ dbinom(maf.mark, ploidy)
}
}"
#Initialize model
adapt.model <- jags.model(textConnection(geno.model),
data=geno.data,
n.chains=1,
n.adapt=2000)
#Sample from posterior
samp.model = coda.samples(adapt.model,
c("genotype"), n.iter=1000)
#Calculate posterior genotypes
posterior.genotypes <- c()
for(i in 1:ncol(samp.model[[1]])){
posterior.plausibility <- (samp.model[[1]][,i]/sum(samp.model[[1]][,i]))
posterior.value <- (samp.model[[1]][,i])
posterior.genotype <- sum(posterior.plausibility*posterior.value)
posterior.genotypes <- c(posterior.genotypes, posterior.genotype)
}
#Plot posterior
if(plotc == TRUE){
par(mfrow=c(1,1))
ml.genotypes <- geno.data$count.a1/geno.data$count.tot
plot(posterior.genotypes ~ ml.genotypes)
par(mfrow=c(4,1))
for(i in 1:4){
r.index <- c(1:geno.data$n)[i]
plot(density(samp.model[,r.index][[1]], kernel = "rectangular"),
main=paste("coverage = ", geno.data$count.tot[r.index],
" maf = ", round(geno.data$maf.mark,2)),
xlab=paste("major allele count =", geno.data$count.a1[r.index]),
xlim=c(-1,5))
}
}
return(posterior.genotypes)
}
a <- calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 0.5, ploidy = 4, plotc = T)
calc.geno.posterior <- function(a1c, totc, mafc, ploidy, plotc=F){
geno.data <- list(n = length(a1c),
count.a1 = as.numeric(a1c),
count.tot = as.numeric(totc),
maf.mark = mafc,
ploidy = ploidy)
geno.model <-
"model {
# Likelihood
for (i in 1:n) {
count.a1[i] ~ dbinom(genofrac[i], count.tot[i])
genofrac[i] <- genotype[i]/4
genotype[i] ~ dbinom(maf.mark, ploidy)
}
}"
#Initialize model
adapt.model <- jags.model(textConnection(geno.model),
data=geno.data,
n.chains=1,
n.adapt=2000)
#Sample from posterior
samp.model = coda.samples(adapt.model,
c("genotype"), n.iter=1000)
#Calculate posterior genotypes
posterior.genotypes <- c()
for(i in 1:ncol(samp.model[[1]])){
posterior.plausibility <- (samp.model[[1]][,i]/sum(samp.model[[1]][,i]))
posterior.value <- (samp.model[[1]][,i])
posterior.genotype <- sum(posterior.plausibility*posterior.value)
posterior.genotypes <- c(posterior.genotypes, posterior.genotype)
}
#Plot posterior
if(plotc == TRUE){
par(mfrow=c(1,1))
ml.genotypes <- geno.data$count.a1/geno.data$count.tot
plot(posterior.genotypes ~ ml.genotypes)
par(mfrow=c(4,1))
for(i in 1:4){
r.index <- c(1:geno.data$n)[i]
plot(density(samp.model[,r.index][[1]], kernel = "rectangular", bw=0.01),
main=paste("coverage = ", geno.data$count.tot[r.index],
" maf = ", round(geno.data$maf.mark,2)),
xlab=paste("major allele count =", geno.data$count.a1[r.index]),
xlim=c(-1,5))
}
}
return(posterior.genotypes)
}
a <- calc.geno.posterior(a1c = a1c[,1], totc = totc[,1], mafc = 0.5, ploidy = 4, plotc = T)
dev.off()
rm(list=ls())
setwd("~/Desktop/BrummerLab/projects/divergent-pops/singlepop/singlepop-scripts/")
populationtitle <- "CUF"
all.freqs <- read.table(
paste("../results/sub-bulk.freqs-", populationtitle, ".txt", sep = ""),
header = T, sep = "\t")
setwd(paste("../",
populationtitle,
"/data/", sep = ""))
all.freqs <- read.table(
paste("../results/sub-bulk.freqs-", populationtitle, ".txt", sep = ""),
header = T, sep = "\t")
dim(all.freqs)
sum(all.freqs$chr=="chr0")
16750/84978
